// SPDX-FileCopyrightText: Contributors to the Power Grid Model project <powergridmodel@lfenergy.org>
//
// SPDX-License-Identifier: MPL-2.0

#define PGM_VNF_DLL_EXPORTS

#include <iostream>

#include "../../../../../power-grid-model/power_grid_model_c/power_grid_model_c/src/forward_declarations.hpp"
#include "../../../../../power-grid-model/power_grid_model_c/power_grid_model_c/src/handle.hpp"

#include "../../../../power_grid_model_io_native_c/power_grid_model_io_native_c/include/power_grid_model_io_native_c/c_converter_api.h"
#include "../../../../power_grid_model_io_native_c/power_grid_model_io_native_c/include/power_grid_model_io_native_c/vnf_pgm_converter.h"

#include <power_grid_model/common/common.hpp>

extern "C" {
    PGM_VNF_CONVERTER_HELPER_DLL_EXPORT void parse_vnf_file();
    PGM_VNF_CONVERTER_HELPER_DLL_EXPORT PGM_ConstDataset* convert_input_wrapper();
    // PGM_VNF_CONVERTER_HELPER_DLL_EXPORT void set_core_path(char const* const path); ------ we will not be needing this right?
}

// static std::string core_path{PGM_VNF_CONVERTER_DLL_PREFIX + "shared_library_core"s + PGM_VNF_CONVERTER_DLL_SUFFIX};

// Wrapper functions
void parse_vnf_file_wrapper(PgmVnfConverter* obj) {
    return obj->parse_vnf_file();
};

PGM_ConstDataset* convert_input_wrapper(PgmVnfConverter* obj) {
    return obj->convert_input();
};

class PgmVnfConverter {
    public:
        char* f_file_buffer;       
        PGM_WritableDataset* deserialized_data; // this type because it is generated by a deserializer type structure
        // input data
        // will be supplied by the  user:
        // ConstDatasetPtr const unique_input_dataset{PGM_create_dataset_const(hl, "input", 0, 1)};
        // PGM_ConstDataset* input_dataset = unique_input_dataset.get();

        // PGM_dataset_const_* pgm_input_data; testing purposes only

        void parse_vnf_file(){
            
            // a deserializer type structure
            // vnf file is a raw string

            // this->deserialized_data = parsed_data
        };

        PGM_ConstDataset* convert_input(){
            convert_node_input();
            convert_line_input();
            convert_sources_input();
            convert_sym_loads_input();
            convert_shunts_input();
            convert_transformer_input();
            convert_sym_gens_input();
            convert_links_input();

            // then return the buffer
            // return pgm_input_data;
        };
        
    private:
        void convert_node_input(){
            // instead of add buffer(will be done on vision side)
            // we have to do get_buffer(doesn't exist yet, we have to create it, create getters on the pgm c api)
        };

        void convert_line_input(){};

        void convert_sources_input(){};

        void convert_sym_loads_input(){};

        void convert_shunts_input(){};
            
        void convert_transformer_input(){};
            
        void convert_sym_gens_input(){};
            
        void convert_links_input(){};
            
};

// void set_core_path(char const* const path) {
//     core_path = path;
//     std::cout << "Core path set to: '" << core_path << "'" << std::endl;
// };